# define terms
# global wildcard for samples 
SAMPLES, = glob_wildcards("./rawreads/{sample}_R1.fastq.gz")

# ref for hisat2 alignment
reference="./hisat2/Homo_sapiens.GRCh38.dna.primary_assembly.fa"

# annotation file
annotation="./hisat2/Homo_sapiens.GRCh38.100.gtf"

# forward and reverse reads
r1="./rawdata/{sample}_R1.fastq.gz"
r2="./rawdata/{sample}_R2.fastq.gz"

# final output files
rule all:
        input:
              "hisat2/hisat2_counts.txt",
              "QC_Reports/multiqc_report.html",
              "Trim_galore/multiqc_report.html",
	      "hisat2/multiqc_report.html"
	       expand("Kallisto/{sample}/abundance.tsv",  sample=SAMPLES),  
              "Differential_Expression.html"

# downloading the required files
rule download_samples:
    output:
         samples=("sample37.fastq.gz","sample39.fastq.gz","sample40.fastqc.gz",
		"sample41.fastqc.gz","sample42.fastqc.gz","sample38.fastqc.gz")

    shell:
        # download samples                                                                                                                                                            
        
	"""
        # make directories for the samples 
        mkdir -p rawdata
        
        # download the samples
        wget -c http://h3data.cbio.uct.ac.za/assessments/RNASeq/practice/dataset/sample37_R1.fastq.gz -O rawdata/sample37_R1.fastq.gz 
        wget -c http://h3data.cbio.uct.ac.za/assessments/RNASeq/practice/dataset/sample37_R2.fastq.gz -O rawdata/sample37_R2.fastq.gz 
        wget -c http://h3data.cbio.uct.ac.za/assessments/RNASeq/practice/dataset/sample38_R1.fastq.gz -O rawdata/sample38_R1.fastq.gz 
        wget -c http://h3data.cbio.uct.ac.za/assessments/RNASeq/practice/dataset/sample38_R2.fastq.gz -O rawdata/sample38_R2.fastq.gz 
        wget -c http://h3data.cbio.uct.ac.za/assessments/RNASeq/practice/dataset/sample39_R1.fastq.gz -O rawdata/sample39_R1.fastq.gz 
        wget -c http://h3data.cbio.uct.ac.za/assessments/RNASeq/practice/dataset/sample39_R2.fastq.gz -O rawdata/sample39_R2.fastq.gz 
        wget -c http://h3data.cbio.uct.ac.za/assessments/RNASeq/practice/dataset/sample40_R1.fastq.gz -O rawdata/sample40_R1.fastq.gz
        wget -c http://h3data.cbio.uct.ac.za/assessments/RNASeq/practice/dataset/sample40_R2.fastq.gz -O rawdata/sample40_R2.fastq.gz
        wget -c http://h3data.cbio.uct.ac.za/assessments/RNASeq/practice/dataset/sample41_R1.fastq.gz -O rawdata/sample41_R1.fastq.gz
        wget -c http://h3data.cbio.uct.ac.za/assessments/RNASeq/practise/dataset/sample41_R2.fastq.gz -O rawdata/sample41_R2.fastq.gz                     
        wget -c http://h3data.cbio.uct.ac.za/assessments/RNASeq/practice/dataset/sample42_R1.fastq.gz -O rawdata/sample42_R1.fastq.gz
        wget -c http://h3data.cbio.uct.ac.za/assessments/RNASeq/practise/dataset/sample42_R2.fastq.gz -O rawdata/sample42_R2.fastq.gz

        # hg38 files
        mkdir -p hisat2

	# download hg38
	wget -c ftp://ftp.ensembl.org/pub/release-100/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz \
              -O hisat2/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz
        
	# unzip the hg38 file
        gunzip  hisat2/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz

	# download annotation file and unzipping
        wget -c ftp://ftp.ensembl.org/pub/release-100/gtf/homo_sapiens/Homo_sapiens.GRCh38.100.gtf.gz \
	     -O hisat2/Homo_sapiens.GRCh38.100.gtf.gz
       
	# unzip annotation file	
	gunzip hisat2/Homo_sapiens.GRCh38.100.gtf.gz 
        """

             
# quality Checks with fastqc
rule fastqc:
        input:
             read1=r1,
             read2=r2
        output:
              "QC_Reports/{sample}_R1_fastqc.html",
              "QC_Reports/{sample}_R2_fastqc.html"
        shell:
             "fastqc {input.read1} {input.read2} -o QC_Reports"

# fastqc report with multiqc
rule multiqc:
	input:
	     html=expand("QC_Reports/{sample}_R1_fastqc.html", sample=SAMPLES),
	params:
              dir="Results/Fastqc_Reports"
	output:
	      "QC_Reports/multiqc_report.html"
        shell:
	     "multiqc {params.dir}  -o {params.dir}"

# Trimming with Trim_galore
rule trimming:
        input:
                read1=r1,
                read2=r2,
                html="QC_Reports/{sample}_R1_fastqc.html"
        output:
                r1="Trim_galore/{sample}_R1_val_1.fq.gz",
                r2="Trim_galore/{sample}_R2_val_2.fq.gz",
		r1_html="Trim_galore/{sample}_R1_val_1_fastqc.html",
		r2_html="Trim_galore/{sample}_R2_val_2_fastqc.html"
        shell:
                "trim_galore --paired {input.read1} {input.read2} -q 25 --length 20 --fastqc -o Results/Trim_galore"

# Multiqc for trimmed fastq files
rule multiqc2:
	input:
	     trim_html=expand("Trim_galore/{sample}_R1_val_1_fastqc.html", sample=SAMPLES)
	output:
	      "Trim_galore/multiqc_report.html"
	params:
	      dir="Trim_galore"
	shell:
	     "multiqc {params.dir} -o {params.dir}"

# Indexing reference with hisat2
rule hisat2_index:
        input:
             ref=reference
        output:
             touch("hisat2/makeidx.done")
        params:
             threads=20,
             idx="hisat2/Homo_sapiens.GRCh38v3_hisat2.idx"
        shell:
             "hisat2-build -p {params.threads} {input.ref} {params.idx}"

# Alignment using hisat2
rule alignment:
        input:
              idxdone="hisat2/makeidx.done",
              trim1="Trim_galore/{sample}_R1_val_1.fq.gz",
              trim2="Trim_galore/{sample}_R2_val_2.fq.gz"
        output:
              "hisat2/{sample}.sam"
        params:
             idx="hisat2/Homo_sapiens.GRCh38v3_hisat2.idx",
             threads=20
        shell:
             "hisat2 -p {params.threads} -x {params.idx}  -1 {input.trim1} -2 {input.trim2} -S {output}"


# samtobam conversion
rule sam2bam:
        input:
             "hisat2/{sample}.sam"
        output:
             "hisat2/{sample}_hisat2_sorted.bam"
        shell:
             "samtools view -@ 20 -Sbh {input} | samtools sort -@ 20 > {output}; samtools index {output}; rm {input}"


# obtain alignment counts using featureCounts
rule featurecounts:
        input:
             files=expand("hisat2/{sample}_hisat2_sorted.bam", sample=SAMPLES),
             annot=annotation
        output:
             "hisat2/hisat2_counts.txt"
        params:
             threads=20
        shell:
             "featureCounts -T {params.threads} -a {input.annot} -o {output} {input.files}"

# Multiqc report for featurecounts data
rule multiqc3:
	input:
	     "hisat2/hisat2_counts.txt"
	params:
             dir="hisat2"
	output:
	     "hisat2/multiqc_report.html"
	shell:
	     "multiqc {params.dir}  -o {params.dir} "


# kallisto
# Generate transcriptome index
rule Kallisto_index:
        input:
             ref=txpme
        output:
             "Kallisto/kallisto_index"
        shell:
             "kallisto index {input.ref} -i {output}"


# Pseudo-alignment with Kallisto
rule kallisto_alignment:
        input:
             trim_read1="Trim_galore/{sample}_R1_val_1.fq.gz",
             trim_read2="Trim_galore/{sample}_R2_val_2.fq.gz",
             k_idx="Kallisto/kallisto_index"
        output:
             "Kallisto/{sample}/abundance.tsv"
        params:
             threads=20,
             btstraps=100,
             dir="Kallisto/{sample}"
        shell:
             "kallisto quant -t {params.threads} -b {params.btstraps} -i {input.k_idx} -o {params.dir}  {input.trim_read1} {input.trim_read2}"











